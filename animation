<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Orbital & Epicyclic Frequencies</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #0a0a1a, #1a1a2e);
            color: white;
            font-family: 'Arial', sans-serif;
            min-height: 100vh;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
        }
        .title {
            text-align: center;
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #4facfe, #00f2fe);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 20px rgba(79, 172, 254, 0.3);
        }
        .subtitle {
            text-align: center;
            font-size: 1.2em;
            margin-bottom: 30px;
            opacity: 0.8;
        }
        .canvas-container {
            background: radial-gradient(circle at center, rgba(20, 20, 40, 0.8), rgba(0, 0, 0, 0.9));
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(79, 172, 254, 0.2);
        }
        canvas {
            display: block;
            margin: 0 auto;
            border-radius: 10px;
            background: transparent;
        }
        .controls {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
            flex-wrap: wrap;
        }
        .control-group {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }
        label {
            font-size: 0.9em;
            opacity: 0.9;
        }
        input[type="range"] {
            width: 150px;
            -webkit-appearance: none;
            height: 6px;
            border-radius: 3px;
            background: rgba(255, 255, 255, 0.2);
            outline: none;
        }
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: linear-gradient(45deg, #4facfe, #00f2fe);
            cursor: pointer;
            box-shadow: 0 0 10px rgba(79, 172, 254, 0.5);
        }
        .info-panel {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }
        .info-card {
            background: rgba(20, 20, 40, 0.6);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid rgba(79, 172, 254, 0.3);
        }
        .info-card h3 {
            margin-top: 0;
            color: #4facfe;
        }
        .frequency-display {
            font-family: 'Courier New', monospace;
            font-size: 1.1em;
            margin: 10px 0;
        }
        .legend {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-top: 20px;
            flex-wrap: wrap;
        }
        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .legend-color {
            width: 20px;
            height: 20px;
            border-radius: 50%;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="title">Orbital & Epicyclic Frequencies</h1>
        <p class="subtitle">Interactive visualization of particle motion in gravitational systems</p>
        
        <div class="canvas-container">
            <canvas id="canvas" width="800" height="600"></canvas>
        </div>
        
        <div class="controls">
            <div class="control-group">
                <label>Orbital Radius</label>
                <input type="range" id="radius" min="80" max="300" value="150">
            </div>
            <div class="control-group">
                <label>Mass (M)</label>
                <input type="range" id="mass" min="0.5" max="3" step="0.1" value="1">
            </div>
            <div class="control-group">
                <label>Perturbation Amplitude</label>
                <input type="range" id="amplitude" min="0" max="30" value="15">
            </div>
            <div class="control-group">
                <label>Animation Speed</label>
                <input type="range" id="speed" min="0.1" max="3" step="0.1" value="1">
            </div>
        </div>
        
        <div class="legend">
            <div class="legend-item">
                <div class="legend-color" style="background: #ffff00;"></div>
                <span>Central Mass</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #4facfe;"></div>
                <span>Circular Orbit</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #ff6b6b;"></div>
                <span>Perturbed Particle</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: rgba(255, 107, 107, 0.3);"></div>
                <span>Radial Oscillation</span>
            </div>
        </div>
        
        <div class="info-panel">
            <div class="info-card">
                <h3>Orbital Frequency (Ω)</h3>
                <p>The frequency at which a particle completes circular orbits around the central mass.</p>
                <div class="frequency-display">Ω = √(GM/r³)</div>
                <div id="orbital-freq">Ω = 0.000 rad/s</div>
            </div>
            <div class="info-card">
                <h3>Radial Epicyclic Frequency (κ)</h3>
                <p>The frequency of small radial oscillations around the circular orbit.</p>
                <div class="frequency-display">κ = Ω (for Keplerian potential)</div>
                <div id="epicyclic-freq">κ = 0.000 rad/s</div>
            </div>
            <div class="info-card">
                <h3>Key Concepts</h3>
                <p><strong>Blue circle:</strong> Unperturbed circular orbit<br>
                <strong>Red particle:</strong> Shows radial oscillations<br>
                <strong>Red trail:</strong> Demonstrates epicyclic motion</p>
                <p>In Keplerian systems, κ = Ω, meaning radial oscillations have the same frequency as orbital motion.</p>
            </div>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        
        let time = 0;
        let trail = [];
        const maxTrailLength = 200;
        
        // Controls
        const radiusSlider = document.getElementById('radius');
        const massSlider = document.getElementById('mass');
        const amplitudeSlider = document.getElementById('amplitude');
        const speedSlider = document.getElementById('speed');
        
        // Animation parameters
        let radius = parseFloat(radiusSlider.value);
        let mass = parseFloat(massSlider.value);
        let amplitude = parseFloat(amplitudeSlider.value);
        let speed = parseFloat(speedSlider.value);
        
        function updateParameters() {
            radius = parseFloat(radiusSlider.value);
            mass = parseFloat(massSlider.value);
            amplitude = parseFloat(amplitudeSlider.value);
            speed = parseFloat(speedSlider.value);
            
            // Calculate frequencies (normalized units)
            const orbitalFreq = Math.sqrt(mass / Math.pow(radius/100, 3));
            const epicyclicFreq = orbitalFreq; // For Keplerian potential κ = Ω
            
            document.getElementById('orbital-freq').textContent = `Ω = ${orbitalFreq.toFixed(3)} rad/s`;
            document.getElementById('epicyclic-freq').textContent = `κ = ${epicyclicFreq.toFixed(3)} rad/s`;
        }
        
        function drawBackground() {
            // Create starfield effect
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw some stars
            ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
            for (let i = 0; i < 50; i++) {
                const x = (i * 137.5) % canvas.width;
                const y = (i * 117.3) % canvas.height;
                ctx.beginPath();
                ctx.arc(x, y, 0.5, 0, Math.PI * 2);
                ctx.fill();
            }
        }
        
        function drawCentralMass() {
            const massRadius = 15 + mass * 5;
            
            // Glow effect
            const gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, massRadius * 2);
            gradient.addColorStop(0, 'rgba(255, 255, 0, 0.8)');
            gradient.addColorStop(0.5, 'rgba(255, 255, 0, 0.4)');
            gradient.addColorStop(1, 'rgba(255, 255, 0, 0)');
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(centerX, centerY, massRadius * 2, 0, Math.PI * 2);
            ctx.fill();
            
            // Central mass
            ctx.fillStyle = '#ffff00';
            ctx.beginPath();
            ctx.arc(centerX, centerY, massRadius, 0, Math.PI * 2);
            ctx.fill();
        }
        
        function drawCircularOrbit() {
            ctx.strokeStyle = 'rgba(79, 172, 254, 0.6)';
            ctx.lineWidth = 2;
            ctx.setLineDash([5, 5]);
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
            ctx.stroke();
            ctx.setLineDash([]);
        }
        
        function animate() {
            drawBackground();
            drawCentralMass();
            drawCircularOrbit();
            
            // Calculate frequencies
            const orbitalFreq = Math.sqrt(mass / Math.pow(radius/100, 3));
            const epicyclicFreq = orbitalFreq;
            
            // Orbital motion
            const orbitalAngle = time * orbitalFreq * speed;
            
            // Radial oscillation (epicyclic motion)
            const radialOscillation = amplitude * Math.sin(time * epicyclicFreq * speed);
            const currentRadius = radius + radialOscillation;
            
            // Particle position
            const particleX = centerX + currentRadius * Math.cos(orbitalAngle);
            const particleY = centerY + currentRadius * Math.sin(orbitalAngle);
            
            // Add to trail
            trail.push({ x: particleX, y: particleY });
            if (trail.length > maxTrailLength) {
                trail.shift();
            }
            
            // Draw trail
            ctx.strokeStyle = 'rgba(255, 107, 107, 0.3)';
            ctx.lineWidth = 1;
            ctx.beginPath();
            for (let i = 1; i < trail.length; i++) {
                const alpha = i / trail.length;
                ctx.globalAlpha = alpha * 0.7;
                ctx.beginPath();
                ctx.moveTo(trail[i-1].x, trail[i-1].y);
                ctx.lineTo(trail[i].x, trail[i].y);
                ctx.stroke();
            }
            ctx.globalAlpha = 1;
            
            // Draw reference particle on circular orbit
            const refX = centerX + radius * Math.cos(orbitalAngle);
            const refY = centerY + radius * Math.sin(orbitalAngle);
            
            ctx.fillStyle = 'rgba(79, 172, 254, 0.8)';
            ctx.beginPath();
            ctx.arc(refX, refY, 6, 0, Math.PI * 2);
            ctx.fill();
            
            // Draw perturbed particle
            const particleGradient = ctx.createRadialGradient(particleX, particleY, 0, particleX, particleY, 12);
            particleGradient.addColorStop(0, '#ff6b6b');
            particleGradient.addColorStop(1, '#ff1744');
            
            ctx.fillStyle = particleGradient;
            ctx.beginPath();
            ctx.arc(particleX, particleY, 8, 0, Math.PI * 2);
            ctx.fill();
            
            // Draw radial line to show oscillation
            ctx.strokeStyle = 'rgba(255, 107, 107, 0.4)';
            ctx.lineWidth = 1;
            ctx.setLineDash([2, 2]);
            ctx.beginPath();
            ctx.moveTo(centerX, centerY);
            ctx.lineTo(particleX, particleY);
            ctx.stroke();
            ctx.setLineDash([]);
            
            time += 0.02;
            requestAnimationFrame(animate);
        }
        
        // Event listeners
        [radiusSlider, massSlider, amplitudeSlider, speedSlider].forEach(slider => {
            slider.addEventListener('input', updateParameters);
        });
        
        // Initialize
        updateParameters();
        animate();
    </script>
</body>
</html>
